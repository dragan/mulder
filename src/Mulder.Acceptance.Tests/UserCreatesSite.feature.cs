// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Mulder.Acceptance.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("user creates site")]
    public partial class UserCreatesSiteFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        #line 1 "UserCreatesSite.feature"
        #line hidden
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "user creates site", "As a user\nI want a minimal site created for me\nSo that I don't have to start from scratch", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create site without a path")]
        public virtual void CreateSiteWithoutAPath()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create site without a path", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.When("I run the create site command without a path");
#line 8
 testRunner.Then("I should see usage message");
#line 9
 testRunner.And("I should see mulder terminate with an error exit code");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create site with path that already exists")]
        public virtual void CreateSiteWithPathThatAlreadyExists()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create site with path that already exists", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.Given("I have a path that already exists");
#line 13
 testRunner.When("I run the create site command with a path that already exists");
#line 14
 testRunner.Then("I should see \"A site at '[path]' already exists.\" message");
#line 15
 testRunner.And("I should see mulder terminate with an error exit code due to path existing");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create site with valid path")]
        public virtual void CreateSiteWithValidPath()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create site with valid path", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("I have a valid path");
#line 19
 testRunner.When("I run the create site command with a valid path");
#line 20
 testRunner.Then("I should see \"create config.yaml\" message");
#line 21
 testRunner.And("I should see \"create Rules\" message");
#line 22
 testRunner.And("I should see \"create layouts/default.html\" message");
#line 23
 testRunner.And("I should see \"create content/index.html\" message");
#line 24
 testRunner.And("I should see \"create content/stylesheet.css\" message");
#line 25
 testRunner.And("I should see \"Created a blank mulder site at '[path]'. Enjoy!\" message");
#line 26
 testRunner.And("I should have a directory created for my site");
#line 27
 testRunner.And("I should have my site directory populated with the default bare-bones site");
#line 28
 testRunner.And("the \"config.yaml\" file should contain the default config");
#line 29
 testRunner.And("the \"Rules\" file should contain the default rules");
#line 30
 testRunner.And("the \"layouts/default.html\" file should contain the default layout");
#line 31
 testRunner.And("the \"content/index.html\" file should contain the default content");
#line 32
 testRunner.And("the \"content/stylesheet.css\" file should contain the default styles");
#line 33
 testRunner.And("mulder should terminate with an success exit code");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
